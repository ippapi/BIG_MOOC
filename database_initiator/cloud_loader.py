from cassandra.cluster import Cluster
from cassandra.query import BatchStatement
from cassandra.auth import PlainTextAuthProvider
import json
import csv

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': './secret/secure-connect-moocassandra.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("./secret/MOOCASSANDRA-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

def init_schema():
    session.set_keyspace('BIG_MOOC')

    # Drop tables if they already exist
    session.execute("DROP TABLE IF EXISTS user_course;")
    session.execute("DROP TABLE IF EXISTS users;")
    session.execute("DROP TABLE IF EXISTS courses;")

    # Create tables
    session.execute("""
        CREATE TABLE IF NOT EXISTS courses (
            course_id TEXT PRIMARY KEY,
            name TEXT,
            about TEXT
        );
    """)
    session.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            name TEXT,
            gender TEXT,
            year_of_birth TEXT
        );
    """)
    session.execute("""
        CREATE TABLE IF NOT EXISTS user_course (
            user_id TEXT,
            course_id TEXT,
            enroll_time TIMESTAMP,
            PRIMARY KEY ((user_id), course_id)
        );
    """)
    print("Keyspace and tables dropped and recreated.")

def load_users():
    batch_size = 50
    batch = BatchStatement()
    count = 0

    with open('./data/user.csv') as f:
        reader = csv.DictReader(f)
        for row in reader:
            batch.add("""
                INSERT INTO users (user_id, name, gender, year_of_birth)
                VALUES (%s, %s, %s, %s)
            """, (row['id'], row['name'], row['gender'], row['year_of_birth']))

            count += 1

            if count % batch_size == 0:
                session.execute(batch)
                batch = BatchStatement()

    if len(batch) > 0:
        session.execute(batch)

def load_courses():
    batch_size = 50
    batch = BatchStatement()
    count = 0

    with open('./data/course.csv') as f:
        reader = csv.DictReader(f)
        for row in reader:
            batch.add("""
                INSERT INTO courses (course_id, name, about)
                VALUES (%s, %s, %s)
            """, (row['id'], row['name'], row['about']))
            count += 1

            if count % batch_size == 0:
                session.execute(batch)
                batch = BatchStatement()
                
    if len(batch) > 0:
        session.execute(batch)

# Function to batch insert enrollments
def load_enrollments():
    batch_size = 50
    batch = BatchStatement()
    count = 0
    with open('./data/user_course.csv') as f:
        reader = csv.DictReader(f)
        for row in reader:
            batch.add("""
                INSERT INTO user_course (user_id, course_id, enroll_time)
                VALUES (%s, %s, %s)
            """, (row['user'], row['course'], row['enroll_time']))
            count += 1

            if count % batch_size == 0:
                session.execute(batch)
                batch = BatchStatement()
                
    if len(batch) > 0:
        session.execute(batch)

init_schema()
load_users()
load_courses()
load_enrollments()